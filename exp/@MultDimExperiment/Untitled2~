


BarAng	 	= 20;	% Degrees
SqAng	 	= 20;	% Degrees
BarDegreesPerSec            	= 10;		%  Bar speed in °/s
GridCyclesPerSecond = 10; % cycles/sec temporal frequency of the grid flickering
x0 =150;
monSize = [60 30];
axis = 1;
grating = 1;
gratSize = 2; % in cycles/deg
gratSpeed = 2; % in cycles/sec

% CONVERT TO SCREEN UNITS
screenRect =[100 100 500 500];
frameRate =60;

%% setup parameters
xmonsize = monSize(1);% mm X monitor size
ymonsize = monSize(2);% mm Y monitor size
ny = screenRect(4) - screenRect(2); % Y axis resolution for the image space
nz = screenRect(3) - screenRect(1);% X axis resolution for the image space

%% calculatestaff
FoV = atand(monSize(axis)/2/x0)*2;
GridCyclesPerRadiant = 180/SqAng/pi/2; % spatial frequency of the grid in cycles per radiant
BarCyclesPerRadiant = 180/BarAng/pi/2; % spatial frequency of the bar in cycles per radiant
BarCyclesPerSecond = BarDegreesPerSec/FoV; % convert to cycles per second.
BarOffsetCyclesPerFrame = BarCyclesPerSecond / frameRate;
GridOffsetCyclesPerFrame = GridCyclesPerSecond / frameRate;
GratOffsetCyclesPerFrame = gratSpeed/frameRate;

%% initialize vectors
y = linspace(-(ymonsize/2),ymonsize/2,ny/7);
z = linspace(-(xmonsize/2),xmonsize/2,nz/7);
[Y,Z] = ndgrid(y,z);

% create tranformations of space
theta = pi/2-acos(Y./sqrt(x0^2+Y.^2+Z.^2)); % vertical
phi = atan(-Z/x0); % horizontal

% create grid
VG1 = (cos(2*pi*GridCyclesPerRadiant*(theta)))>0; % vertical grading
VG2 = (cos((2*pi*GridCyclesPerRadiant*(theta))-pi))>0; % vertical grading with pi offset
HG = cos(2*pi*GridCyclesPerRadiant*phi)>0; % horizontal grading
Grid = bsxfun(@times,VG1,HG) + bsxfun(@times,VG2,1-HG); %combine all

% How many frames do we have to precalculate?
delay = 16600;
nbFrames = ceil(delay/1000*frameRate);

%% angle
if axis==1;angle1 = phi; angle2 = theta;else angle1 = theta;angle2 = phi;end

% intialize offsets
BarOffset = 0;
GridOffset = 0;
GratOffset = 0;

barHalfWidth = pi/2; 
BarOffsetCyclesPerFrame = BarOffsetCyclesPerFrame*FoV/BarAng/2;

% fix this
op =  sign(randn);

startOffset = min(angle1(:)*BarCyclesPerRadiant) - 1/4;
    
% STIM PRESENTATION
for i=1:nbFrames
   

    angle = 2*pi*(angle1*BarCyclesPerRadiant+BarOffset+startOffset);
    angle(angle<(-barHalfWidth) | angle>(barHalfWidth)) = pi; % threshold grading to create a single bar
    A = cos(angle)>0; % squaring
    
    if grating
        gred = (cos(2*pi*(gratSize*(angle2)+GratOffset*op))); % vertical grading
        texMat = uint8(abs(gred)*254);
    else
        flash = cos(2*pi*GridOffset)>0;
        texMat =  uint8(A.*abs(Grid-flash)*254);
    end
    
 imagesc(texMat)
 drawnow

    
    GratOffset = GratOffset+ GratOffsetCyclesPerFrame;
    GridOffset = GridOffset+ GridOffsetCyclesPerFrame;
    BarOffset = BarOffset+BarOffsetCyclesPerFrame;
 
end


